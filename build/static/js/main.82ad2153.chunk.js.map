{"version":3,"sources":["components/Book.js","components/add.js","components/BookList.js","App.js","serviceWorker.js","index.js"],"names":["Book","props","state","read","status","this","setState","className","style","background","onClick","handleSelect","bind","id","title","author","pages","delete","class","React","Component","Add","f","document","getElementById","display","reset","event","preventDefault","data","FormData","target","Title","get","Author","Pages","Read","addBook","onSubmit","handleSubmit","htmlFor","type","name","required","min","value","formOpener","BookList","BookArray","list","s","arr","showingBooks","query","filter","b","toLowerCase","includes","map","index","key","add","App","searchTerm","search","deleteBook","e","book","copy","slice","push","offendingTitle","onChange","EditSearchTerm","placeholder","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6TAGaA,G,YAAb,kDACI,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,KAAM,EAAKF,MAAME,MAHN,EADvB,2DASQ,IAAIC,EAASC,KAAKH,MAAMC,KAAO,EAAI,EACnCE,KAAKC,SAAS,CACVH,KAAMC,MAXlB,+BAgBc,IAAD,OAEL,OACA,yBAAKG,UAAU,QACX,uBAAGA,UAAU,2BAA2BC,MAAU,CAACC,WAAgBJ,KAAKH,MAAMC,KAAO,MAAQ,SAAUO,QAASL,KAAKM,aAAaC,KAAKP,OACnI,0BAAME,UAAU,eAAeF,KAAKH,MAAMC,KAAO,UAAY,SAEjE,yBAAKI,UAAY,UACjB,wBAAIM,GAAG,SAASR,KAAKJ,MAAMa,OAC3B,wBAAID,GAAG,UAAP,OAAqBR,KAAKJ,MAAMc,QAChC,yBAAKF,GAAG,SAAR,UAAwBR,KAAKJ,MAAMe,OACnC,4BAAQT,UAAU,IAAIG,QAAS,kBAAM,EAAKT,MAAMgB,OAAO,EAAKhB,MAAMa,SAAQ,uBAAGI,MAAM,gCA3B/F,GAA0BC,IAAMC,YCAnBC,G,MAAb,2KAEQ,IAAMC,EAAIC,SAASC,eAAe,KACZ,QAAnBF,EAAEd,MAAMiB,QACPH,EAAEd,MAAMiB,QAAU,SAGlBH,EAAEd,MAAMiB,QAAU,OAClBH,EAAEI,WARd,mCAaiBC,GACTA,EAAMC,iBACN,IAAMC,EAAO,IAAIC,SAASH,EAAMI,QAE5BC,EAAQH,EAAKI,IAAI,SACjBC,EAASL,EAAKI,IAAI,UAClBE,EAAQN,EAAKI,IAAI,SACjBG,EAAOP,EAAKI,IAAI,QAEpB5B,KAAKJ,MAAMoC,QAAQ,CAAEvB,MAAOkB,EACxBjB,OAAOmB,EACPlB,MAAMmB,EACNhC,KAAKiC,MAzBjB,+BA8BQ,OACI,yBAAK7B,UAAU,kBACf,0BAAMM,GAAG,IAAIyB,SAAUjC,KAAKkC,aAAa3B,KAAKP,OAC1C,2BAAOmC,QAAQ,SAAf,UACA,2BAAOC,KAAK,OAAO5B,GAAG,QAAQ6B,KAAK,QAAQC,UAAQ,IACnD,2BAAOH,QAAQ,UAAf,WACA,2BAAOC,KAAK,OAAO5B,GAAG,SAAS6B,KAAK,SAASC,UAAQ,IACrD,2BAAOH,QAAQ,SAAf,UACA,2BAAOC,KAAK,SAASG,IAAI,IAAI/B,GAAG,QAAQ6B,KAAK,QAAQC,UAAQ,IAC7D,6BACI,qCAEI,2BAAOF,KAAK,QAAQC,KAAK,OAAO7B,GAAG,MAAMgC,OAAO,IAChD,2BAAOL,QAAQ,OAAf,QAGA,6BACQ,2BAAOC,KAAK,QAAQC,KAAK,OAAO7B,GAAG,KAAKgC,OAAO,IAC/C,2BAAOL,QAAQ,MAAf,QAIhB,4BAAQC,KAAK,UAAb,QAGJ,yBAAKlC,UAAU,OACnB,4BAAQG,QAASL,KAAKyC,WAAWlC,KAAKP,OAAO,uBAAGE,UAAU,oBAAb,cAxDrD,GAAyBY,IAAMC,YCElB2B,G,MAAb,kDAEI,WAAY9C,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAS,CACV8C,UAAW,EAAK/C,MAAMgD,KACtBC,EAAG,EAAKjD,MAAMkD,KALH,EAFvB,qDAec,IAAD,OAECC,EAAoC,KAArB/C,KAAKJ,MAAMoD,MAAehD,KAAKJ,MAAMgD,KAAO5C,KAAKJ,MAAMgD,KAAKK,QAAO,SAACC,GAAD,OAAOA,EAAEzC,MAAM0C,cAAcC,SAAS,EAAKxD,MAAMoD,MAAMG,kBAG/I,OACI,yBAAKjD,UAAU,aAGd6C,EAAaM,KAAI,SAACb,EAAOc,GAEvB,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAO7C,MAAO+B,EAAM/B,MAAOC,OAAQ8B,EAAM9B,OAAQC,MAAO6B,EAAM7B,MAAOb,KAAM0C,EAAM1C,KAAMc,OAAQ,EAAKhB,MAAMgB,YAQ/H,kBAAC,EAAD,CAAKoB,QAAShC,KAAKJ,MAAM4D,WAlCrC,GAA8B1C,IAAMC,YCsFrB0C,E,kDArFb,WAAY7D,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAEX8C,UAAY,CAAC,CACClC,MAAO,mBACPC,OAAQ,kBACRC,MAAO,IACPb,MAAM,GAER,CACEW,MAAO,gBACPC,OAAQ,kBACRC,MAAO,IACPb,MAAM,GAER,CACEW,MAAO,aACPC,OAAQ,kBACRC,MAAO,IACPb,MAAM,IAIpB4D,WAAY,IAKd,EAAKC,OAAS,EAAKA,OAAOpD,KAAZ,gBACd,EAAKyB,QAAU,EAAKA,QAAQzB,KAAb,gBACf,EAAKqD,WAAa,EAAKA,WAAWrD,KAAhB,gBA/BD,E,2DAmCJsD,GACb7D,KAAKC,SAAS,CACZyD,WAAYG,EAAEnC,OAAOc,U,+BAMf,IAAD,OAEP,OAAOxC,KAAKH,MAAM8C,UAAUM,QAAO,SAAAa,GAAI,OAAIA,EAAKrD,MAAM0C,cAAcC,SAAS,EAAKvD,MAAM6D,WAAWP,oB,8BAE7FD,GACN,IAAMa,EAAO/D,KAAKH,MAAM8C,UAAUqB,QAClCD,EAAKE,KAAKf,GAEVlD,KAAKC,SAAS,CACV0C,UAAWoB,M,iCAIRb,GAAI,IACLP,EAAc3C,KAAKH,MAAnB8C,UACJuB,EAAiBhB,EACrBlD,KAAKC,SAAS,CACb0C,UAAWA,EAAUM,QAAO,SAACa,GAC5B,OAAOA,EAAKrD,QAAUyD,S,+BAMXlE,KAAKH,MAAM8C,UACxB,OACE,yBAAKzC,UAAU,OACf,yBAAKA,UAAU,UACf,uCACA,yBAAKA,UAAU,cACb,8BAAM,uBAAGA,UAAU,oBAAb,WACN,2BAAOkC,KAAK,OAAOlC,UAAU,SAASsC,MAASxC,KAAKH,MAAM6D,WAAYS,SAAYnE,KAAKoE,eAAe7D,KAAKP,MAAOqE,YAAY,yBAGhI,yBAAKnE,UAAU,SACb,kBAAC,EAAD,CAAU0C,KAAM5C,KAAKH,MAAM8C,UAAWK,MAAOhD,KAAKH,MAAM6D,WAAYF,IAAKxD,KAAKgC,QAASpB,OAAQZ,KAAK4D,mB,GA/ExF9C,IAAMC,WCOJuD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF3D,SAASC,eAAe,SDyHpB,kBAAmB2D,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.82ad2153.chunk.js","sourcesContent":["import React from 'react';\nimport './book.css';\n\nexport class Book extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            read: this.props.read\n        } \n    }\n    handleSelect() {\n        \n        let status = this.state.read ? 0 : 1\n        this.setState({\n            read: status\n        })\n\n    }\n\n    render() {\n        let u;\n        return(\n        <div className='Book'>\n            <i className=\"fa fa-bookmark-o tooltip\" style = { {background: u = this.state.read ? \"red\" : \"white\"}} onClick={this.handleSelect.bind(this)}>\n                <span className=\"tooltiptext\">{this.state.read ? \"Not yet\" : \"Read\"}</span>\n            </i>\n            <div className = 'detail'>\n            <h1 id=\"title\">{this.props.title}</h1>\n            <h3 id=\"author\">By: {this.props.author}</h3>\n            <div id=\"pages\">Pages: {this.props.pages}</div>\n            <button className='d' onClick={() => this.props.delete(this.props.title)}><i class=\"fa fa-trash-o delete\"></i></button>\n            </div>\n            \n        </div>\n        )\n    }\n\n\n}","import React from 'react';\nimport './add.css'\n\nexport class Add extends React.Component {\n    formOpener() {\n        const f = document.getElementById('f');\n        if(f.style.display == 'none'){\n            f.style.display = 'block';\n\n        } else {\n            f.style.display = 'none';\n            f.reset();\n        }\n\n        \n    }\n    handleSubmit(event) {\n        event.preventDefault();\n        const data = new FormData(event.target);\n\n        let Title = data.get('title');\n        let Author = data.get('author');\n        let Pages = data.get('pages');\n        let Read = data.get('read');\n\n        this.props.addBook({ title: Title,\n            author:Author,\n            pages:Pages,\n            read:Read\n        }\n            );\n    }\n    render() {\n        return(\n            <div className='form-container'>\n            <form id='f' onSubmit={this.handleSubmit.bind(this)}>\n                <label htmlFor='title'>Title:</label>\n                <input type='text' id='title' name='title' required/>\n                <label htmlFor='Author'>Author:</label>\n                <input type='text' id='Author' name='author' required/>\n                <label htmlFor='Pages'>Pages:</label>\n                <input type='number' min='1' id='Pages' name='pages' required/>\n                <div >\n                    <div >\n                    Read?\n                        <input type=\"radio\" name=\"read\" id=\"yes\" value={true} />\n                        <label htmlFor=\"yes\">Yes</label>\n                        </div>\n\n                        <div >\n                                <input type=\"radio\" name=\"read\" id=\"no\" value={false}/>\n                                <label htmlFor=\"no\">No</label>\n                            </div>\n\n                </div>\n                <button type=\"submit\">Add</button>\n\n            </form>\n            <div className='con'>\n        <button onClick={this.formOpener.bind(this)}><i className='material-icons a'>add</i></button>\n        </div>\n        </div>\n        )\n    }\n}","import React from 'react';\nimport { Book } from './Book';\nimport { Add } from './add';\nimport './BookList.css';\n\nexport class BookList extends React.Component {\n\n    constructor(props) {\n        super(props);\n        \n        this.state =  {\n            BookArray: this.props.list,\n            s: this.props.arr \n        }\n        //this.showingBooks = this.props.query === '' ? this.props.list : this.props.list.filter((b) => b.title.toLowerCase().includes(this.props.query.toLowerCase()))\n        \n    }\n\n    \n   \n    render() {\n        let b;\n        const showingBooks = this.props.query === '' ? this.props.list : this.props.list.filter((b) => b.title.toLowerCase().includes(this.props.query.toLowerCase()))\n        //console.table(this.props.query === '' ? this.props.list : this.props.list.filter((b) => b.title.toLowerCase().includes(this.props.query.toLowerCase())));\n       \n        return (\n            <div className='container'>\n            \n           \n            {showingBooks.map((value, index) => {\n               \n               return <Book key={index} title={value.title} author={value.author} pages={value.pages} read={value.read} delete={this.props.delete}/>\n           }\n           \n\n\n           )\n           \n           }\n            <Add addBook={this.props.add}/>\n             </div>\n        )\n    }\n}","import React from 'react';\nimport './App.css';\nimport { BookList } from './components/BookList';\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      //Default value\n      BookArray : [{\n                    title: 'The Hunger Games',\n                    author: 'Suzanne Collins',\n                    pages: 374,\n                    read: true,\n      },\n                  {\n                    title: 'Catching Fire',\n                    author: 'Suzanne Collins',\n                    pages: 391,\n                    read: false\n      },\n                  {\n                    title: 'Mockingjay',\n                    author: 'Suzanne Collins',\n                    pages: 390,\n                    read: false\n      }\n    ],\n      \n      searchTerm: '',\n\n\n\n    }\n    this.search = this.search.bind(this);\n    this.addBook = this.addBook.bind(this);\n    this.deleteBook = this.deleteBook.bind(this);\n    \n    \n  }\n  EditSearchTerm(e) {\n    this.setState({\n      searchTerm: e.target.value,\n      \n    })\n\n  }\n\n  search() {\n    //console.table(this.state.BookArray.filter(book => book.title.toLowerCase().includes(this.state.searchTerm.toLowerCase())))\n    return this.state.BookArray.filter(book => book.title.toLowerCase().includes(this.state.searchTerm.toLowerCase()));\n  }\n  addBook(b) {\n    const copy = this.state.BookArray.slice();\n    copy.push(b);\n    //console.table(copy);\n    this.setState({\n        BookArray: copy\n    })\n    \n}\ndeleteBook(b) {\n  const { BookArray } = this.state;\n  let offendingTitle = b;\n\t\tthis.setState({\n\t\t\tBookArray: BookArray.filter((book) => {\n\t\t\t\treturn book.title !== offendingTitle;\n\t\t\t}),\n\t\t});\n}\n  \n  render() {\n  const list = this.state.BookArray;\n  return (\n    <div className=\"App\">\n    <div className='navBar'>\n    <h1>Library</h1>\n    <div className='search-bar'>\n      <span><i className='material-icons s'>search</i></span>\n      <input type='text' className='search' value = {this.state.searchTerm} onChange= { this.EditSearchTerm.bind(this)} placeholder='Search for a book!' />\n    </div>\n    </div>\n    <div className='panel'>\n      <BookList list={this.state.BookArray} query={this.state.searchTerm} add={this.addBook} delete={this.deleteBook}/>\n    </div>\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}